
// import { Card, Col, Row, Typography } from "antd";
// import { Link } from "react-router-dom";

// const { Title } = Typography;

// const dashboardLinks = [
//   { path: "/alerts", title: "üì¢ Alerts", description: "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Å–æ–±—ã—Ç–∏—è" },
//   { path: "/http", title: "üåê HTTP Logs", description: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤" },
//   { path: "/dns", title: "üß≠ DNS Queries", description: "–ê–Ω–∞–ª–∏–∑ DNS-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤" },
//   { path: "/ip-reputation", title: "üö® IP Reputation", description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–æ–≤ –ø–æ –±–∞–∑–∞–º —É–≥—Ä–æ–∑" },
//   { path: "/ddos", title: "üõ°Ô∏è DDoS & Anomalies", description: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è" },
//   {
//     path: "/anomalies",
//     title: "üõ°Ô∏è DDoS & Anomalies",
//     description: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –∞—Ç–∞–∫ —Ç–∏–ø–∞ DoS/DDoS",
//   },
// ];

// export default function Dashboard() {
//   return (
//     <div className="p-6">
//       <Title level={2}>üìä Network Security Dashboard</Title>
//       <p className="mb-6 text-gray-600">
//         –û–±–∑–æ—Ä –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π —Å–µ—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
//       </p>

//       <Row gutter={[16, 16]}>
//         {dashboardLinks.map((link) => (
//           <Col xs={24} sm={12} md={8} key={link.path}>
//             <Link to={link.path}>
//               <Card
//                 hoverable
//                 title={link.title}
//                 bordered
//                 style={{ height: "100%" }}
//               >
//                 <p>{link.description}</p>
//               </Card>
//             </Link>
//           </Col>
//         ))}
//       </Row>
//     </div>
//   );
// }

// src/pages/Dashboard.tsx

// import React, { useEffect, useState } from 'react';
// import AnomalyChart from '../components/AnomalyChart';
// import GeoDistributionChart from '../components/GeoDistributionChart';
// import IncidentTrends from '../components/IncidentTrends';
// import StatsCards from '../components/StatsCards';
// import { fetchDashboardData } from '../services/dashboardService';
// import { DashboardData } from '../types/dashboard';

// const Dashboard: React.FC = () => {
//   const [data, setData] = useState<DashboardData | null>(null);

//   useEffect(() => {
//     fetchDashboardData()
//       .then(setData)
//       .catch((err) => {
//         console.error('‚ùå Error fetching dashboard data:', err);
//       });
//   }, []);

//   if (!data) return <div>Loading...</div>;

//   return (
//     <div className="p-6 space-y-6">
//       <h1 className="text-2xl font-bold">üìä –û–±–∑–æ—Ä —Å–µ—Ç–∏ –∏ —É–≥—Ä–æ–∑</h1>
//       <StatsCards uniqueIPs={data.uniqueIPs} anomalies={data.anomalies} />
//       <div className="grid md:grid-cols-2 gap-6">
//         <GeoDistributionChart geo={data.geoDistribution} />
//         <AnomalyChart anomalies={data.anomalies} />
//       </div>
//       <IncidentTrends daily={data.incidents.daily} weekly={data.incidents.weekly} />
//     </div>
//   );
// };

// export default Dashboard;
// import "chart.js/auto"; // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
// import { useEffect, useState } from "react";
// import { Line, Pie } from "react-chartjs-2";
// import { axiosInstance } from "../api/axiosInstance";

// interface OverviewData {
//   uniqueIps: number;
//   anomaliesByType: { [key: string]: number };
//   countryDistribution: { [country: string]: number };
//   incidentsDaily: { date: string; count: number }[];
//   incidentsWeekly: { week: string; count: number }[];
// }

// export default function Dashboard() {
//   const [data, setData] = useState<OverviewData | null>(null);

//   useEffect(() => {
//     axiosInstance.get("/api/dashboard/overview")
//       .then(res => setData(res.data))
//       .catch(console.error);
//   }, []);

//   if (!data) return <div className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

//   return (
//     <div className="p-4 space-y-8">
//       <h1 className="text-2xl font-bold">–û–±–∑–æ—Ä —Å–µ—Ç–∏ –∏ —É–≥—Ä–æ–∑</h1>

//       <div className="text-lg">–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ IP: {data.uniqueIps}</div>

//       <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//         {/* Pie: —Ç–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π */}
//         <div className="bg-white shadow rounded p-4">
//           <h2 className="text-xl mb-2">–¢–∏–ø—ã –∞—Ç–∞–∫</h2>
//           <Pie data={{
//             labels: Object.keys(data.anomaliesByType),
//             datasets: [{
//               data: Object.values(data.anomaliesByType),
//               backgroundColor: [
//                 "#ef4444", "#3b82f6", "#10b981", "#f59e0b", "#8b5cf6"
//               ],
//             }],
//           }} />
//         </div>

//         {/* Line: –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ –¥–Ω—è–º */}
//         <div className="bg-white shadow rounded p-4">
//           <h2 className="text-xl mb-2">–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ –¥–Ω—è–º</h2>
//           <Line data={{
//             labels: data.incidentsDaily.map(i => i.date),
//             datasets: [{
//               label: "–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –≤ –¥–µ–Ω—å",
//               data: data.incidentsDaily.map(i => i.count),
//               borderColor: "#3b82f6",
//               tension: 0.3,
//             }],
//           }} />
//         </div>

//         {/* Line: –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ –Ω–µ–¥–µ–ª—è–º */}
//         <div className="bg-white shadow rounded p-4">
//           <h2 className="text-xl mb-2">–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ –Ω–µ–¥–µ–ª—è–º</h2>
//           <Line data={{
//             labels: data.incidentsWeekly.map(i => i.week),
//             datasets: [{
//               label: "–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –≤ –Ω–µ–¥–µ–ª—é",
//               data: data.incidentsWeekly.map(i => i.count),
//               borderColor: "#10b981",
//               tension: 0.3,
//             }],
//           }} />
//         </div>
//       </div>
//     </div>
//   );
// }
import { Select } from "antd"; // new alerts

import "chart.js/auto";
import { format, parseISO } from "date-fns";
import { useEffect, useState } from "react";
import { Bar, Line, Pie } from "react-chartjs-2";
import { axiosInstance } from "../api/axiosInstance";
import RecentCriticalEvents from "../components/RecentCriticalEvents";
import SuspiciousIpTable from "../components/SuspiciousIpTable";
import UniqueSourcesDailyChart from "../components/UniqueSourcesDailyChart";

interface OverviewData {
  uniqueIps: number;
  anomaliesByType: { [key: string]: number };
  countryDistribution: { [country: string]: number };
  incidentsDaily: { date: string; count: number }[];
  incidentsWeekly: { week: string; count: number }[];
}
// üëá –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–æ–ø–æ–≤—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
interface TopCategory {
  alert_category: string;
  count: number;
}

export default function Dashboard() {
  const [data, setData] = useState<OverviewData | null>(null);
    // üëá –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ "–¢–û–ü –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"
  const [topCategories, setTopCategories] = useState<TopCategory[]>([]);
   // üëá –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  const [range, setRange] = useState<"daily" | "weekly" | "all">("daily");

  useEffect(() => {
    axiosInstance.get("/api/dashboard/overview")
      .then(res => {
        const raw = res.data;

        const normalized: OverviewData = {
          uniqueIps: parseInt(raw.uniqueIPs),
          anomaliesByType: raw.anomalies,
          countryDistribution: Object.fromEntries(
            raw.geoDistribution.map((entry: any) => [entry.country, parseInt(entry.count)])
          ),
          incidentsDaily: raw.incidents.daily.map((e: any) => ({
            date: e.date,
            count: parseInt(e.count),
          })),
          incidentsWeekly: raw.incidents.weekly.map((e: any) => ({
            week: e.week,
            count: parseInt(e.count),
          })),
        };

        setData(normalized);
      })
      .catch(console.error);

    // // üëá –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è top-categories
    // axiosInstance.get("/api/alerts/top-categories")
    // .then(res => setTopCategories(res.data))
    // .catch(console.error);
  }, []);
  // üëá –û–ë–ù–û–í–õ–ï–ù–û: useEffect —Å —Ñ–∏–ª—å—Ç—Ä–æ–º top-categories
  useEffect(() => {
    const params = range === "all" ? {} : { range };
    axiosInstance.get("/api/alerts/top-categories", { params })
      .then(res => setTopCategories(res.data))
      .catch(console.error);
  }, [range]);

  if (!data) return <div className="p-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    
    <div className="p-4 space-y-8">
      <h1 className="text-2xl font-bold">üìä –û–±–∑–æ—Ä —Å–µ—Ç–∏ –∏ —É–≥—Ä–æ–∑</h1>
        {/* –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö IP */}
      <div className="bg-white shadow rounded p-4 md:col-span-2">
      <SuspiciousIpTable />
      <RecentCriticalEvents />
      <UniqueSourcesDailyChart />

      </div>
      <div className="text-lg font-medium">
        –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ IP: <span className="font-bold">{data.uniqueIps}</span>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Pie: –¢–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π */}
        <div className="bg-white shadow rounded p-4">
          <h2 className="text-xl font-semibold mb-2">–¢–∏–ø—ã –∞—Ç–∞–∫</h2>
          <Pie data={{
            labels: Object.keys(data.anomaliesByType),
            datasets: [{
              data: Object.values(data.anomaliesByType),
              backgroundColor: [
                "#ef4444", "#3b82f6", "#10b981", "#f59e0b", "#8b5cf6"
              ],
            }],
          }} />
        </div>

        {/* Bar: –ì–µ–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ */}
        <div className="bg-white shadow rounded p-4">
          <h2 className="text-xl font-semibold mb-2">–ì–µ–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h2>
          <Bar data={{
            labels: Object.keys(data.countryDistribution),
            datasets: [{
              label: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ IP",
              data: Object.values(data.countryDistribution),
              backgroundColor: "#f59e0b",
            }],
          }} />
        </div>
         {/* üî• –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ì–†–ê–§–ò–ö: –¢–û–ü –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
         <div className="bg-white shadow rounded p-4 md:col-span-2">
          <div className="flex justify-between items-center mb-2">
            <h2 className="text-xl font-semibold">üî• –¢–û–ü –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º</h2>
            {/* üëá –î–û–ë–ê–í–õ–ï–ù Select –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ */}
            <Select
              value={range}
              onChange={(v) => setRange(v)}
              options={[
                { label: "–ó–∞ –¥–µ–Ω—å", value: "daily" },
                { label: "–ó–∞ –Ω–µ–¥–µ–ª—é", value: "weekly" },
                { label: "–í—Å–µ", value: "all" },
              ]}
              style={{ width: 120 }}
            />
          </div>
          <Bar data={{
            labels: topCategories.map(c => c.alert_category),
            datasets: [{
              label: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
              data: topCategories.map(c => c.count),
              backgroundColor: "#ef4444",
            }],
          }} options={{
            indexAxis: 'y',
            responsive: true,
            plugins: {
              legend: { display: false },
            },
            scales: {
              x: {
                ticks: { precision: 0 }
              }
            }
          }} />
        </div>
        {/* üî• –ö–û–ù–ï–¶ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ */}
        {/* üî• –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ì–†–ê–§–ò–ö: –¢–û–ü –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
        {/* <div className="bg-white shadow rounded p-4 md:col-span-2">
          <h2 className="text-xl font-semibold mb-2">üî• –¢–û–ü –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º</h2>
          <Bar data={{
            labels: topCategories.map(c => c.alert_category),
            datasets: [{
              label: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
              data: topCategories.map(c => c.count),
              backgroundColor: "#ef4444",
            }],
          }} options={{
            indexAxis: 'y',
            responsive: true,
            plugins: {
              legend: { display: false },
            },
            scales: {
              x: {
                ticks: { precision: 0 }
              }
            }
          }} />
        </div> */}
        {/* üî• –ö–û–ù–ï–¶ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ */}
        {/* Line: –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ –¥–Ω—è–º */}
        <div className="bg-white shadow rounded p-4 md:col-span-2">
          <h2 className="text-xl font-semibold mb-2">–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ –¥–Ω—è–º</h2>
          <Line data={{
            labels: data.incidentsDaily.map(i => format(parseISO(i.date), "dd.MM")),
            datasets: [{
              label: "–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –≤ –¥–µ–Ω—å",
              data: data.incidentsDaily.map(i => i.count),
              borderColor: "#3b82f6",
              tension: 0.3,
            }],
          }} />
        </div>

        {/* Line: –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ –Ω–µ–¥–µ–ª—è–º */}
        <div className="bg-white shadow rounded p-4 md:col-span-2">
          <h2 className="text-xl font-semibold mb-2">–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ –Ω–µ–¥–µ–ª—è–º</h2>
          <Line data={{
            labels: data.incidentsWeekly.map(i => i.week),
            datasets: [{
              label: "–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –≤ –Ω–µ–¥–µ–ª—é",
              data: data.incidentsWeekly.map(i => i.count),
              borderColor: "#10b981",
              tension: 0.3,
            }],
          }} />
        </div>
      </div>
    </div>
  );
}// ...========== GOOD VERSION
// import "chart.js/auto";
// import { format, parseISO } from "date-fns";
// import { useEffect, useState } from "react";
// import { Bar, Line, Pie } from "react-chartjs-2";
// import { axiosInstance } from "../api/axiosInstance";

// interface IncidentDaily {
//   date: string;
//   count: number;
// }

// interface IncidentWeekly {
//   week: string;
//   count: number;
// }

// interface OverviewData {
//   uniqueIps: number;
//   anomaliesByType: Record<string, number>;
//   countryDistribution: Record<string, number>;
//   incidentsDaily: IncidentDaily[];
//   incidentsWeekly: IncidentWeekly[];
// }

// export default function Dashboard(): JSX.Element {
//   const [data, setData] = useState<OverviewData | null>(null);

//   useEffect(() => {
//     axiosInstance
//       .get("/api/dashboard/overview")
//       .then((res) => {
//         const raw = res.data;
//         const normalized: OverviewData = {
//           uniqueIps: Number(raw.uniqueIPs),
//           anomaliesByType: raw.anomalies,
//           countryDistribution: Object.fromEntries(
//             raw.geoDistribution.map(
//               (entry: { country: string; count: string }) => [
//                 entry.country,
//                 Number(entry.count),
//               ]
//             )
//           ),
//           incidentsDaily: raw.incidents.daily.map(
//             (e: { date: string; count: string }) => ({
//               date: e.date,
//               count: Number(e.count),
//             })
//           ),
//           incidentsWeekly: raw.incidents.weekly.map(
//             (e: { week: string; count: string }) => ({
//               week: e.week,
//               count: Number(e.count),
//             })
//           ),
//         };
//         setData(normalized);
//       })
//       .catch(console.error);
//   }, []);

//   if (!data)
//     return <div className="p-6 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;

//   return (
//     <div className="p-6 space-y-8 bg-gray-50 min-h-screen">
//       <h1 className="text-3xl font-semibold text-gray-800">
//         üìä –û–±–∑–æ—Ä —Å–µ—Ç–∏ –∏ —É–≥—Ä–æ–∑
//       </h1>

//       {/* –ú–µ—Ç—Ä–∏–∫–∏ */}
//       <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
//         <div className="bg-white shadow rounded-xl p-6">
//           <h2 className="text-gray-500 text-sm">–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞</h2>
//           <p className="text-2xl font-bold text-blue-600">{data.uniqueIps}</p>
//         </div>

//         <div className="bg-white shadow rounded-xl p-6">
//           <h2 className="text-gray-500 text-sm">–í—Å–µ–≥–æ –∞–Ω–æ–º–∞–ª–∏–π</h2>
//           <p className="text-2xl font-bold text-red-500">
//             {Object.values(data.anomaliesByType).reduce(
//               (a, b) => a + b,
//               0
//             )}
//           </p>
//         </div>

//         <div className="bg-white shadow rounded-xl p-6">
//           <h2 className="text-gray-500 text-sm">–°—Ç—Ä–∞–Ω—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏</h2>
//           <p className="text-2xl font-bold text-yellow-500">
//             {Object.keys(data.countryDistribution).length}
//           </p>
//         </div>
//       </div>

//       {/* –ì—Ä–∞—Ñ–∏–∫–∏ */}
//       <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
//         <div className="bg-white rounded-xl shadow p-6">
//           <h3 className="text-xl font-semibold mb-4">–¢–∏–ø—ã –∞—Ç–∞–∫</h3>
//           <Pie
//             data={{
//               labels: Object.keys(data.anomaliesByType),
//               datasets: [
//                 {
//                   data: Object.values(data.anomaliesByType),
//                   backgroundColor: [
//                     "#ef4444",
//                     "#3b82f6",
//                     "#10b981",
//                     "#f59e0b",
//                     "#8b5cf6",
//                   ],
//                 },
//               ],
//             }}
//             options={{
//               plugins: {
//                 legend: {
//                   position: "bottom",
//                 },
//               },
//             }}
//           />
//         </div>

//         <div className="bg-white rounded-xl shadow p-6">
//           <h3 className="text-xl font-semibold mb-4">–ì–µ–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h3>
//           <Bar
//             data={{
//               labels: Object.keys(data.countryDistribution),
//               datasets: [
//                 {
//                   label: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ IP",
//                   data: Object.values(data.countryDistribution),
//                   backgroundColor: "#f59e0b",
//                 },
//               ],
//             }}
//             options={{
//               plugins: {
//                 legend: { display: false },
//               },
//               scales: {
//                 y: {
//                   beginAtZero: true,
//                   ticks: {
//                     stepSize: 1,
//                   },
//                 },
//               },
//             }}
//           />
//         </div>
//       </div>

//       <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
//         <div className="bg-white rounded-xl shadow p-6">
//           <h3 className="text-xl font-semibold mb-4">–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ –¥–Ω—è–º</h3>
//           <Line
//             data={{
//               labels: data.incidentsDaily.map((i) =>
//                 format(parseISO(i.date), "dd.MM")
//               ),
//               datasets: [
//                 {
//                   label: "–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –≤ –¥–µ–Ω—å",
//                   data: data.incidentsDaily.map((i) => i.count),
//                   borderColor: "#3b82f6",
//                   backgroundColor: "rgba(59, 130, 246, 0.1)",
//                   fill: true,
//                   tension: 0.4,
//                 },
//               ],
//             }}
//           />
//         </div>

//         <div className="bg-white rounded-xl shadow p-6">
//           <h3 className="text-xl font-semibold mb-4">–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ –Ω–µ–¥–µ–ª—è–º</h3>
//           <Line
//             data={{
//               labels: data.incidentsWeekly.map((i) => i.week),
//               datasets: [
//                 {
//                   label: "–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –≤ –Ω–µ–¥–µ–ª—é",
//                   data: data.incidentsWeekly.map((i) => i.count),
//                   borderColor: "#10b981",
//                   backgroundColor: "rgba(16, 185, 129, 0.1)",
//                   fill: true,
//                   tension: 0.4,
//                 },
//               ],
//             }}
//           />
//         </div>
//       </div>
//     </div>
//   );
// }
