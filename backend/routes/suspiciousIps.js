const express = require("express");
const pool = require("../db");
const { getIpReputation } = require("../utils/abuseIpCheck");

const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-10 –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö IP
router.get("/suspicious-ips", async (req, res) => {
  try {
    const { rows } = await pool.query(`
      SELECT ip, reputation, score, country, usage_type, last_checked
      FROM ip_reputation
      WHERE score >= 30
      ORDER BY score DESC, last_checked DESC
      LIMIT 10
    `);

    res.json(rows);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP-–¥–∞–Ω–Ω—ã—Ö:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ IP" });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å IP-—Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (–≤—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö)
router.post("/fetch", async (req, res) => {
  try {
    const { rows: ipsToCheck } = await pool.query(`
      SELECT DISTINCT ip FROM (
        SELECT src_ip::INET AS ip FROM suricata_http
        UNION
        SELECT dest_ip::INET FROM suricata_http
        UNION
        SELECT src_ip::INET FROM suricata_dns
        UNION
        SELECT dest_ip::INET FROM suricata_dns
        UNION
        SELECT src_ip::INET FROM suricata_alerts
        UNION
        SELECT dest_ip::INET FROM suricata_alerts
      ) AS all_ips
      WHERE ip NOT IN (
        SELECT ip FROM ip_reputation
        WHERE last_checked >= NOW() - INTERVAL '7 days'
      )
      LIMIT 10
    `);

    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ IP:", ipsToCheck.map(r => r.ip).join(", "));

    const enriched = [];

    for (const row of ipsToCheck) {
      try {
        const data = await getIpReputation(row.ip);

        await pool.query(`
          INSERT INTO ip_reputation (ip, reputation, score, country, usage_type, last_checked)
          VALUES ($1, $2, $3, $4, $5, NOW())
          ON CONFLICT (ip) DO UPDATE
          SET reputation = EXCLUDED.reputation,
              score = EXCLUDED.score,
              country = EXCLUDED.country,
              usage_type = EXCLUDED.usage_type,
              last_checked = NOW()
        `, [data.ip, data.reputation, data.score, data.country, data.usageType]);

        enriched.push(data);
      } catch (err) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ API –ø–æ IP ${row.ip}:`, err.message);
      }
    }

    res.json({ updated: enriched.length, enriched });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è IP-—Ä–µ–ø—É—Ç–∞—Ü–∏–π:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö" });
  }
});

module.exports = router;
