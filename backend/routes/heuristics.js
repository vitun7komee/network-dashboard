// const express = require("express");
// const pool = require("../db");
// const router = express.Router();

// async function logHeuristic(type, description, severity = "medium") {
//   const exists = await pool.query(
//     `SELECT id FROM heuristic_incidents WHERE type = $1 AND description = $2 AND resolved = false LIMIT 1`,
//     [type, description]
//   );
//   if (exists.rows.length === 0) {
//     await pool.query(
//       `INSERT INTO heuristic_incidents (type, description, severity) VALUES ($1, $2, $3)`,
//       [type, description, severity]
//     );
//   }
// }

// // üîç 1. –ß–∞—Å—Ç—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IP –Ω–µ –∏–∑ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã
// async function detectForeignConnections() {
//   const result = await pool.query(`
//     SELECT ip, country, COUNT(*) as cnt
//     FROM ip_reputation
//     WHERE country IS NOT NULL AND country <> 'RU'
//     GROUP BY ip, country
//     HAVING COUNT(*) > 10
//   `);

//   for (const row of result.rows) {
//     await logHeuristic(
//       "foreign_connections",
//       `–ß–∞—Å—Ç—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${row.cnt}) –∫ IP ${row.ip} –∏–∑ —Å—Ç—Ä–∞–Ω—ã ${row.country}`,
//       "high"
//     );
//   }
// }

// // üîÅ 2. –ú–Ω–æ–≥–æ HTTP GET –ø–æ–¥—Ä—è–¥
// async function detectSuspiciousHttpGets() {
//   const result = await pool.query(`
//     SELECT src_ip, COUNT(*) as count
//     FROM suricata_http
//     WHERE method = 'GET'
//     GROUP BY src_ip
//     HAVING COUNT(*) > 20
//   `);

//   for (const row of result.rows) {
//     await logHeuristic(
//       "many_get_requests",
//       `–ò—Å—Ç–æ—á–Ω–∏–∫ ${row.src_ip} –≤—ã–ø–æ–ª–Ω–∏–ª ${row.count} HTTP GET-–∑–∞–ø—Ä–æ—Å–æ–≤`,
//       "medium"
//     );
//   }
// }

// // üß† 3. –û–¥–∏–Ω IP —à–ª—ë—Ç DNS –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ö–æ—Å—Ç–æ–≤
// async function detectDnsSweeps() {
//   const result = await pool.query(`
//     SELECT src_ip, COUNT(DISTINCT dest_ip) as targets
//     FROM suricata_dns
//     GROUP BY src_ip
//     HAVING COUNT(DISTINCT dest_ip) > 30
//   `);

//   for (const row of result.rows) {
//     await logHeuristic(
//       "dns_sweep",
//       `IP ${row.src_ip} –æ—Ç–ø—Ä–∞–≤–∏–ª DNS-–∑–∞–ø—Ä–æ—Å—ã –±–æ–ª–µ–µ —á–µ–º ${row.targets} –∞–¥—Ä–µ—Å–∞—Ç–∞–º`,
//       "high"
//     );
//   }
// }
// // üî• 5. –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ (alerts —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º severity)
// async function detectHighSeverityAlerts() {
//     const result = await pool.query(`
//       SELECT src_ip, alert_category, COUNT(*) as count
//       FROM suricata_alertsF
//       WHERE alert_severity >= 4 -- –ø–æ—Ä–æ–≥ severity, –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å
//       GROUP BY src_ip, alert_category
//       HAVING COUNT(*) > 5
//     `);
  
//     for (const row of result.rows) {
//       await logHeuristic(
//         "high_severity_alerts",
//         `IP ${row.src_ip} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª ${row.count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${row.alert_category}" —Å –≤—ã—Å–æ–∫–æ–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å—é.`,
//         "high"
//       );
//     }
//   }
  
//   // üö® 6. –ê–Ω–æ–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HTTP POST –∑–∞–ø—Ä–æ—Å–æ–≤ (—á–∞—Å—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –∞—Ç–∞–∫–∏)
//   async function detectHttpPostFlood() {
//     const result = await pool.query(`
//       SELECT src_ip, COUNT(*) as count
//       FROM suricata_http
//       WHERE method = 'POST' AND timestamp > NOW() - INTERVAL '1 hour'
//       GROUP BY src_ip
//       HAVING COUNT(*) > 30
//     `);
  
//     for (const row of result.rows) {
//       await logHeuristic(
//         "http_post_flood",
//         `IP ${row.src_ip} –≤—ã–ø–æ–ª–Ω–∏–ª –±–æ–ª–µ–µ 30 POST –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å.`,
//         "medium"
//       );
//     }
//   }
  
//   // üåê 7. DNS –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º)
//   async function detectSuspiciousDnsQueries() {
//     const suspiciousPatterns = ['.xyz', '.ru', '.top']; // –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
  
//     for (const pattern of suspiciousPatterns) {
//       const result = await pool.query(`
//         SELECT src_ip, COUNT(*) as count
//         FROM suricata_dns
//         WHERE query LIKE $1
//         GROUP BY src_ip
//         HAVING COUNT(*) > 10
//       `, [`%${pattern}`]);
  
//       for (const row of result.rows) {
//         await logHeuristic(
//           "suspicious_dns_query",
//           `IP ${row.src_ip} –æ—Ç–ø—Ä–∞–≤–∏–ª –±–æ–ª–µ–µ 10 DNS-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –¥–æ–º–µ–Ω–∞–º —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º "${pattern}".`,
//           "medium"
//         );
//       }
//     }
//   }
  
//   // ‚ö†Ô∏è 8. –ü–æ–ø—ã—Ç–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ (–º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω—ã—Ö dest_port –æ—Ç –æ–¥–Ω–æ–≥–æ src_ip)
//   async function detectPortScanning() {
//     const result = await pool.query(`
//       SELECT src_ip, COUNT(DISTINCT dest_port) as ports_scanned
//       FROM suricata_flows
//       WHERE timestamp > NOW() - INTERVAL '1 hour'
//       GROUP BY src_ip
//       HAVING COUNT(DISTINCT dest_port) > 20
//     `);
  
//     for (const row of result.rows) {
//       await logHeuristic(
//         "port_scanning",
//         `IP ${row.src_ip} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ–ª–µ–µ —á–µ–º ${row.ports_scanned} —Ä–∞–∑–Ω—ã–º –ø–æ—Ä—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å.`,
//         "high"
//       );
//     }
//   }
  
//   // üö© 9. –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è IP –∏–∑ ip_reputation (score < 20, –Ω–∞–ø—Ä–∏–º–µ—Ä)
// //   async function detectBadReputationIps() {
// //     const result = await pool.query(`
// //       SELECT ip, reputation, score
// //       FROM ip_reputation
// //       WHERE score > 40
// //     `);
  
// //     for (const row of result.rows) {
// //       await logHeuristic(
// //         "bad_ip_reputation",
// //         `IP ${row.ip} –∏–º–µ–µ—Ç –ø–ª–æ—Ö—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é (${row.reputation}) —Å –æ—Ü–µ–Ω–∫–æ–π ${row.score}.`,
// //         "high"
// //       );
// //     }
// //   }
  

// // üì∂ 4. –ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–Ω–∞ –æ—Å–Ω–æ–≤–µ suricata_flows)
// // async function detectVolumeAnomaly() {
// //   const result = await pool.query(`
// //     SELECT
// //       COUNT(*) FILTER (WHERE timestamp::date = CURRENT_DATE) AS today,
// //       ROUND(AVG(count), 0) AS avg
// //     FROM (
// //       SELECT timestamp::date AS d, COUNT(*) AS count
// //       FROM suricata_flows
// //       GROUP BY d
// //     ) AS sub
// //   `);

// //   const { today, avg } = result.rows[0];
// //   if (avg && today > avg * 1.5) {
// //     await logHeuristic(
// //       "volume_anomaly",
// //       `–°–µ–≥–æ–¥–Ω—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ ${today} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (${avg})`,
// //       "medium"
// //     );
// //   }
// // }
// async function detectVolumeAnomaly() {
//     const result = await pool.query(`
//       SELECT
//         COUNT(*) FILTER (WHERE d = CURRENT_DATE) AS today,
//         ROUND(AVG(count), 0) AS avg
//       FROM (
//         SELECT timestamp::date AS d, COUNT(*) AS count
//         FROM suricata_flows
//         GROUP BY d
//       ) AS sub
//     `);
  
//     const { today, avg } = result.rows[0];
//     if (avg && today > avg * 1.5) {
//       await logHeuristic(
//         "volume_anomaly",
//         `–°–µ–≥–æ–¥–Ω—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ ${today} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (${avg})`,
//         "medium"
//       );
//      }
//     }
  
  


// // üß™ –ê–Ω–∞–ª–∏–∑ —ç–≤—Ä–∏—Å—Ç–∏–∫
// router.post("/analyze", async (req, res) => {
//   try {
//     await detectForeignConnections();
//     await detectSuspiciousHttpGets();
//     await detectDnsSweeps();
//     await detectVolumeAnomaly();
//     // –ù–æ–≤—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
//     await detectHighSeverityAlerts();
//     await detectHttpPostFlood();
//     await detectSuspiciousDnsQueries();
//     await detectPortScanning();
//     //await detectBadReputationIps();
//     res.json({ status: "ok" });
//   } catch (err) {
//     console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–≤—Ä–∏—Å—Ç–∏–∫:", err);
//     res.status(500).json({ error: "Heuristic analysis failed" });
//   }
// });

// // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
// router.get("/", async (req, res) => {
//   try {//SELECT * FROM heuristic_incidents ORDER BY timestamp DESC
//     const result = await pool.query(`
//         SELECT * FROM heuristic_incidents WHERE resolved = false ORDER BY timestamp DESC
//     `);
//     res.json(result.rows);
//   } catch (err) {
//     console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–≤—Ä–∏—Å—Ç–∏–∫:", err);
//     res.status(500).json({ error: "Failed to fetch incidents" });
//   }
// });

// // ‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—ã–π
// router.post("/:id/resolve", async (req, res) => {
//   const { id } = req.params;
//   try {
//     await pool.query(`
//       UPDATE heuristic_incidents SET resolved = true WHERE id = $1
//     `, [id]);
//     res.json({ status: "resolved" });
//   } catch (err) {
//     console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:", err);
//     res.status(500).json({ error: "Failed to resolve incident" });
//   }
// });

// module.exports = router;
// üìÅ heuristics.js
const express = require("express");
const pool = require("../db");
const router = express.Router();
const crypto = require("crypto");//—Ö–µ—à

// üÜï –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å —É–≥—Ä–æ–∑–æ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
// async function logHeuristic(type, description, severity = "medium", threat = "", recommendations = "") {
//   const exists = await pool.query(
//     `SELECT id FROM heuristic_incidents WHERE type = $1 AND description = $2 AND resolved = false LIMIT 1`,
//     [type, description]
//   );
//   if (exists.rows.length === 0) {
//     await pool.query(
//       `INSERT INTO heuristic_incidents (type, description, severity, threat, recommendations) VALUES ($1, $2, $3, $4, $5)`,
//       [type, description, severity, threat, recommendations]
//     );
//   }
// }
// üÜï –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è resolved = true)
async function logHeuristic(type, description, severity = "medium", threat = "", recommendations = "") {
  // üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç (–ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞)
  const existing = await pool.query(
    `SELECT id, resolved FROM heuristic_incidents WHERE type = $1 AND description = $2 ORDER BY timestamp DESC LIMIT 1`,
    [type, description]
  );

  // ‚ùå –ï—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ—Ä–µ—à—ë–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  if (existing.rows.length > 0 && existing.rows[0].resolved) {
    return; // üîÅ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç
  }

  // ‚úÖ –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —Ä–µ—à—ë–Ω —Ä–∞–Ω–µ–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
  await pool.query(
    `INSERT INTO heuristic_incidents (type, description, severity, threat, recommendations) VALUES ($1, $2, $3, $4, $5)`,
    [type, description, severity, threat, recommendations]
  );
}



// üîç 1. –ß–∞—Å—Ç—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IP –Ω–µ –∏–∑ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã
async function detectForeignConnections() {
  const result = await pool.query(`
    SELECT ip, country, COUNT(*) as cnt
    FROM ip_reputation
    WHERE country IS NOT NULL AND country <> 'RU'
    AND last_checked > NOW() - INTERVAL '7 days'
    GROUP BY ip, country
    HAVING COUNT(*) > 10
  `);

  for (const row of result.rows) {
    await logHeuristic(
      "foreign_connections",
      `–ß–∞—Å—Ç—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${row.cnt}) –∫ IP ${row.ip} –∏–∑ —Å—Ç—Ä–∞–Ω—ã ${row.country}`,
      "high",
      "C2 / –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫",
      "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å, —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ IP –Ω–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–µ, –µ—Å–ª–∏ –æ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω."
    );
  }
}


// üîÅ 2. –ú–Ω–æ–≥–æ HTTP GET –ø–æ–¥—Ä—è–¥
async function detectSuspiciousHttpGets() {
  const result = await pool.query(`
    SELECT src_ip, COUNT(*) as count
    FROM suricata_http
    WHERE method = 'GET' AND timestamp > NOW() - INTERVAL '1 day'
    GROUP BY src_ip
    HAVING COUNT(*) > 20
  `);

  for (const row of result.rows) {
    await logHeuristic(
      "many_get_requests",
      `–ò—Å—Ç–æ—á–Ω–∏–∫ ${row.src_ip} –≤—ã–ø–æ–ª–Ω–∏–ª ${row.count} HTTP GET-–∑–∞–ø—Ä–æ—Å–æ–≤`,
      "medium",
      "Recon Activity",
      "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ IP. –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–µ URL."
    );
  }
}

// üß† 3. –û–¥–∏–Ω IP —à–ª—ë—Ç DNS –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ö–æ—Å—Ç–æ–≤
async function detectDnsSweeps() {
  const result = await pool.query(`
    SELECT src_ip, COUNT(DISTINCT dest_ip) as targets
    FROM suricata_dns
    WHERE timestamp > NOW() - INTERVAL '1 day'
    GROUP BY src_ip
    HAVING COUNT(DISTINCT dest_ip) > 30
  `);

  for (const row of result.rows) {
    await logHeuristic(
      "dns_sweep",
      `IP ${row.src_ip} –æ—Ç–ø—Ä–∞–≤–∏–ª DNS-–∑–∞–ø—Ä–æ—Å—ã –±–æ–ª–µ–µ —á–µ–º ${row.targets} –∞–¥—Ä–µ—Å–∞—Ç–∞–º`,
      "high",
      "Recon / Beaconing",
      "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∑–ª–æ–≤—Ä–µ–¥–æ–≤ –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã."
    );
  }
}

// üì∂ 4. –ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
async function detectVolumeAnomaly() {
  const result = await pool.query(`
    SELECT
      COUNT(*) FILTER (WHERE d = CURRENT_DATE) AS today,
      ROUND(AVG(count), 0) AS avg
    FROM (
      SELECT timestamp::date AS d, COUNT(*) AS count
      FROM suricata_flows
      GROUP BY d
    ) AS sub
  `);

  const { today, avg } = result.rows[0];
  if (avg && today > avg * 1.5) {
    await logHeuristic(
      "volume_anomaly",
      `–°–µ–≥–æ–¥–Ω—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ ${today} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ‚Äî –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (${avg})`,
      "medium",
      "Anomalous Activity",
      "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ IP —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π. –í–æ–∑–º–æ–∂–Ω–∞ –∞—Ç–∞–∫–∞ –∏–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."
    );
  }
}

// üî• 5. –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ (alerts —Å –≤—ã—Å–æ–∫–∏–º severity)
async function detectHighSeverityAlerts() {
  const result = await pool.query(`
    SELECT src_ip, alert_category, COUNT(*) as count
    FROM suricata_alertsF
    WHERE alert_severity >= 4 AND timestamp > NOW() - INTERVAL '1 day'
    GROUP BY src_ip, alert_category
    HAVING COUNT(*) > 5
  `);

  for (const row of result.rows) {
    await logHeuristic(
      "high_severity_alerts",
      `IP ${row.src_ip} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª ${row.count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${row.alert_category}"`,
      "high",
      "Malicious Traffic",
      "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –∏–∑–æ–ª–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É."
    );
  }
}

// üö® 6. –ê–Ω–æ–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HTTP POST –∑–∞–ø—Ä–æ—Å–æ–≤
async function detectHttpPostFlood() {
  const result = await pool.query(`
    SELECT src_ip, COUNT(*) as count
    FROM suricata_http
    WHERE method = 'POST' AND timestamp > NOW() - INTERVAL '1 hour'
    GROUP BY src_ip
    HAVING COUNT(*) > 30
  `);

  for (const row of result.rows) {
    await logHeuristic(
      "http_post_flood",
      `IP ${row.src_ip} –≤—ã–ø–æ–ª–Ω–∏–ª –±–æ–ª–µ–µ 30 POST –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å.`,
      "medium",
      "Potential DoS / Data Exfiltration",
      "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ POST-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É—Ç–µ—á–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã."
    );
  }
}

// üåê 7. DNS –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
async function detectSuspiciousDnsQueries() {
  const patterns = ['.xyz', '.ru', '.top'];
  for (const pattern of patterns) {
    const result = await pool.query(`
      SELECT src_ip, COUNT(*) as count
      FROM suricata_dns
      WHERE query LIKE $1 AND timestamp > NOW() - INTERVAL '7 days'
      GROUP BY src_ip
      HAVING COUNT(*) > 10
    `, [`%${pattern}`]);

    for (const row of result.rows) {
      await logHeuristic(
        "suspicious_dns_query",
        `IP ${row.src_ip} —Å–¥–µ–ª–∞–ª –±–æ–ª–µ–µ 10 DNS-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –¥–æ–º–µ–Ω–∞–º "${pattern}"`,
        "medium",
        "Suspicious DNS",
        "–ò–∑—É—á–∏—Ç–µ —ç—Ç–æ—Ç —Ç—Ä–∞—Ñ–∏–∫. –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ–∏—à–∏–Ω–≥–µ, –º–∞–ª–≤–∞—Ä–∏ –∏–ª–∏ C2."
      );
    }
  }
}

// ‚ö†Ô∏è 8. –ü–æ–ø—ã—Ç–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
async function detectPortScanning() {
  const result = await pool.query(`
    SELECT src_ip, COUNT(DISTINCT dest_port) as ports_scanned
    FROM suricata_flows
    WHERE timestamp > NOW() - INTERVAL '1 hour'
    GROUP BY src_ip
    HAVING COUNT(DISTINCT dest_port) > 20
  `);

  for (const row of result.rows) {
    await logHeuristic(
      "port_scanning",
      `IP ${row.src_ip} –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª ${row.ports_scanned} –ø–æ—Ä—Ç–æ–≤`,
      "high",
      "Port Scan",
      "–ë–ª–æ–∫–∏—Ä—É–π—Ç–µ IP, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏. –í–æ–∑–º–æ–∂–Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç–∞–∫–µ."
    );
  }
}

// üß™ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —ç–≤—Ä–∏—Å—Ç–∏–∫
router.post("/analyze", async (req, res) => {
  try {
    await detectForeignConnections();
    await detectSuspiciousHttpGets();
    await detectDnsSweeps();
    await detectVolumeAnomaly();
    await detectHighSeverityAlerts();
    await detectHttpPostFlood();
    await detectSuspiciousDnsQueries();
    await detectPortScanning();
    res.json({ status: "ok" });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–≤—Ä–∏—Å—Ç–∏–∫:", err);
    res.status(500).json({ error: "Heuristic analysis failed" });
  }
});

// üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
router.get("/", async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT * FROM heuristic_incidents WHERE resolved = false ORDER BY timestamp DESC
    `);
    res.json(result.rows);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–≤—Ä–∏—Å—Ç–∏–∫:", err);
    res.status(500).json({ error: "Failed to fetch incidents" });
  }
});

// ‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—ã–π
router.post("/:id/resolve", async (req, res) => {
  const { id } = req.params;
  try {
    await pool.query(`
      UPDATE heuristic_incidents SET resolved = true WHERE id = $1
    `, [id]);
    res.json({ status: "resolved" });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:", err);
    res.status(500).json({ error: "Failed to resolve incident" });
  }
});

module.exports = router;
